openapi: 3.0.0
info:
  description: API permettant de consulter des informations concernants des produits alimentaires, le tout via un systeme de gestion d'utilisateur
  version: 1.0.0
  title: OpenFoodCRUD

servers:
  - url: https://localhost:8081
    description: Developpement

tags:
  - name: user
    description: Gestion des utilisateurs
  - name: product
    description: Gestion des produits

paths:
  /user:
    get:
      tags:
        - user
      summary: Permet d'identifier un utilisateur
      parameters:
        - $ref: "#/components/parameters/username"
        - $ref: "#/components/parameters/password"
      responses:
        "200":
          description: Success Response
          headers:
            token:
              $ref: '#/components/schemas/token'
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessUserConnexion"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequest"
        "404":
          description: Resource Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
        "500":
          description: Internal Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalError"
    post:
      tags:
        - user
      summary: Crée un utilisateur
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "201":
          description: Success Response
          headers:
            token:
              $ref: '#/components/schemas/token'
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessUserConnexion"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequest"
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Conflict"
        "500":
          description: Internal Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalError"
    patch:
      tags:
        - user
      summary: Modifie les informations d'un utilisateur
      parameters:
        - $ref: "#/components/parameters/token"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserProfile"
      responses:
        "201": 
          description: Success Response
          headers:
            token:
              $ref: '#/components/schemas/token'
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessUserConnexion"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequest"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthorized"
        "500":
          description: Internal Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalError"
    delete:
      tags:
        - user
      summary: Permet de supprimer un utilisateur
      parameters:
        - $ref: "#/components/parameters/token"
      responses:
        "204":
          description: Success Response No Content
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessNoContent"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthorized"
        "500":
          description: Internal Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalError"
  /product:
    get:
      tags:
        - product
      summary: Récupère la liste de tout les produits enregistrés
      parameters:
        - $ref: "#/components/parameters/token"
      responses:
        "200":
          description: Success Response
          headers:
            token:
              $ref: '#/components/schemas/token'
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessFetchProductList"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthorized"
        "404":
          description: Resource Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
        "500":
          description: Internal Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalError"
    delete:
      tags:
        - product
      summary: Supprime tous les produits enregistrés
      parameters:
        - $ref: "#/components/parameters/token"
      responses:
        "204":
          description: Success Response No Content
          headers:
            token:
              $ref: '#/components/schemas/token'
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessTokenResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthorized"
        "500":
          description: Internal Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalError"
  /product/{bar_code}:
    get:
      tags:
        - product
      summary: Récupère les informations concernant un produit d'un utilisateur
      parameters:
        - $ref: "#/components/parameters/token"
        - $ref: "#/components/parameters/bar_code"
      responses:
        "200":
          description: Success Response
          headers:
            token:
              $ref: '#/components/schemas/token'
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessProductFetch"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthorized"
        "404":
          description: Resource Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
        "500":
          description: Internal Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalError"
    post:
      tags:
        - product
      summary: Ajoute un produit à la liste d'un utilisateur
      parameters:
        - $ref: "#/components/parameters/token"
        - $ref: "#/components/parameters/bar_code"
      responses:
        "200":
          description: Success Response
          headers:
            token:
              $ref: '#/components/schemas/token'
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessProductFetch"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthorized"
        "404":
          description: Resource Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
        "500":
          description: Internal Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalError"
    delete:
      tags:
        - product
      summary: Supprime un produit de la liste d'un utilisateur
      parameters:
        - $ref: "#/components/parameters/token"
        - $ref: "#/components/parameters/bar_code"
      responses:
        "200":
          description: Success Response
          headers:
            token:
              $ref: '#/components/schemas/token'
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessTokenResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Unauthorized"
        "404":
          description: Resource Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFound"
        "500":
          description: Internal Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalError"

components:
  schemas:
    User:
      required:
        - username
        - password
      properties:
        username:
          type: string
          description: Nom de l'utilisateur
        password:
          type: string
          format: password
          description: Mot de passe de l'utilisateur
    
    UserProfile:
      properties:
        username:
          type: string
          example: Pierre
          description: Peusdonyme de l'utilisateur
        desc:
          type: string
          example: "Ce que vous voulez"
          description: description de l'utilisateur

    SuccessUserConnexion:
      description: Success connection
      properties:
        token:
          type: string
          example: "eyJhbGciOiJIU.zI1NiIsInR5cCI6I.kpXVCJ9eyJ1c2Vy"
        user:
          type: object
          example:
            username: "Pseudo User"
            desc: "Description de l'utilisateur"
    
    SuccessProductFetch:
      description: Success request
      properties:
        token:
          type: string
          example: "eyJhbGciOiJIU.zI1NiIsInR5cCI6I.kpXVCJ9eyJ1c2Vy"
        product:
          type: object
          example:
            bar_code: "900296251812"
            product_name: "Noodle"
            brands: "Best noodle ever"
            ingredients_text: "Noodle: rice, water. seasoning packet: peanut, sugar"
            image_url: "https://images.openfoodfacts.org/images400.jpg"

    SuccessFetchProductList:
      description: Success request
      properties:
        token:
          type: string
          example: "eyJhbGciOiJIU.zI1NiIsInR5cCI6I.kpXVCJ9eyJ1c2Vy"
        products:
          type: array
          example: [
            {
              bar_code: "900296251812",
              product_name: "Crunch bar",
              image_url: "https://images.openfoodfacts.org/images.jpg"
            }
          ]

    SuccessTokenResponse:
      properties:
        token:
          type: string
          example: "eyJhbGciOiJIU.zI1NiIsInR5cCI6I.kpXVCJ9eyJ1c2Vy"

    SuccessNoContent:
      description: No content
      properties:
        message:
          type: "string"
          example: "The resource has been deleted"

    Error:
      required:
        - code
        - message
      properties:
        code:
          type: string
        message:
          type: string

    Unauthorized:
      description: Unauthorized
      allOf:
        - $ref: "#/components/schemas/Error"
      properties:
        code:
          type: string
          enum:
            - unauthorized
        message:
          example: "Your request is unauthorized to call this resource"

    BadRequest:
      description: Bad Request
      allOf:
        - $ref: "#/components/schemas/Error"
      properties:
        code:
          type: string
          enum:
            - bad_request
        message:
          example: "The payload do not respect the contract"

    InternalError:
      description: Internal Error
      allOf:
        - $ref: "#/components/schemas/Error"
      properties:
        code:
          type: string
          enum:
            - internal_error
        message:
          example: "Please contact the administrator..."

    NotFound:
      description: Resource not found
      allOf:
        - $ref: "#/components/schemas/Error"
      properties:
        code:
          type: string
          enum:
            - not_found
        message:
          example: "Resource not found"

    Conflict:
      description: Resource already exists
      allOf:
        - $ref: "#/components/schemas/Error"
      properties:
        code:
          type: "string"
          enum:
            - conflict
        message:
          example: "The resource already exists"

    token:
      description: User token.
      type: string

  parameters:
    username:
      name: username
      in: query
      description: User's name
      required: true
      schema:
        type: string
    password:
      name: password
      in: query
      description: User's password
      required: true
      schema:
        type: string
        format: password
    token:
      name: token
      in: header
      description: JWT Token
      required: true
      schema:
        type: string
    bar_code:
      name: bar_code
      in: path
      description: Bar code of the product to fetch
      required: true
      schema:
        type: integer

    